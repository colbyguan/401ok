{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateValue","key","event","setState","defineProperty","parseFloat","target","value","state","annualSalary","contrib","tax","expenses","_this2","monthlySalary","monthlyContrib","contribPercent","earningsAfterTax","map","val","isNaN","isFinite","toTwoDigits","num","Math","round","numbers","react_default","a","createElement","className","htmlFor","type","id","onChange","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc69ed3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      annualSalary: 0,\n      contrib: 0,\n      tax: 0,\n      expenses: 0\n    }\n  }\n  updateValue = (key) => {\n    return (event) => {\n      this.setState({\n        [key]: parseFloat(event.target.value)\n      });\n    };\n  }\n  numbers() {\n    let monthlySalary = this.state.annualSalary / 12;\n    let monthlyContrib = this.state.contrib / 12;\n    let contribPercent = this.state.contrib / this.state.annualSalary * 100;\n    let earningsAfterTax = (100 - this.state.tax)/100 * (monthlySalary - monthlyContrib);\n    let lossToTax = this.state.tax/100 * (monthlySalary - monthlyContrib);\n    let earningsAfterAll = earningsAfterTax - this.state.expenses;\n\n    let values = [contribPercent, lossToTax, earningsAfterTax, earningsAfterAll];\n    return values.map(val => (isNaN(val) || !isFinite(val) ? '--' : this.toTwoDigits(val)));\n  }\n  toTwoDigits(num) {\n    return Math.round(num * 100) / 100\n  }\n  render() {\n    let numbers = this.numbers()\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <p></p>\n          <div className=\"form-card\">\n            <div className=\"form\">\n              <div className=\"input-field\">\n                <label htmlFor=\"salary-annual\">($) Annual salary</label>\n                <input type=\"number\" className=\"form-control\" id=\"salary-annual\" onChange={this.updateValue('annualSalary')} />\n                <small>Your pre-tax salary in your offer letter</small>\n              </div>\n              <div className=\"input-field\">\n                <label htmlFor=\"contrib-annual\">($) Annual 401k contribution (dollar amount)</label>\n                <input type=\"number\" className=\"form-control\" id=\"contrib-annual\" onChange={this.updateValue('contrib')} />\n                <small>Maximum of $19,000 in 2019. See <a href=\"https://www.irs.gov/retirement-plans/plan-participant-employee/retirement-topics-401k-and-profit-sharing-plan-contribution-limits\">here</a> for details</small>\n              </div>\n              <div className=\"input-field\">\n                <label htmlFor=\"tax-rate\">(%) Estimated tax rate</label>\n                <input type=\"number\" className=\"form-control\" id=\"contrib-annual\" onChange={this.updateValue('tax')} />\n                <small>Out of 100%. See <a href=\"https://www.google.com/search?q=tax+bracket\">here</a> for tax brackets</small>\n              </div>\n              <div className=\"input-field\">\n                <label htmlFor=\"expenses\">($) Total monthly expenses (eg. rent)</label>\n                <input type=\"number\" className=\"form-control\" id=\"expenses\" onChange={this.updateValue('expenses')} />\n              </div>\n            </div>\n            <div className=\"results\">\n              <div className=\"row\">\n                <div className=\"col s6 labels\">\n                  <p>Desired contribution percentage</p>\n                  <p>Loss to taxes</p>\n                  <p>Monthly earnings after tax:</p>\n                  <p>Monthly earnings after tax and expenses:</p>\n                </div>\n                <div className=\"col s6 numbers\">\n                  <p>{numbers[0]}%</p>\n                  <p>${numbers[1]}</p>\n                  <p>${numbers[2]}</p>\n                  <p>${numbers[3]}</p>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col s12\">\n                  <small>By contributing more, you may lose less money to taxes with the tradeoff of having less monthly take-home earnings</small>\n                  <br /><br />\n                  <small><strong>Note: this app does not collect or send any of the entered or calculated data.</strong></small>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}